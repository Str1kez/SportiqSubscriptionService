// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Str1kez",
            "url": "https://github.com/Str1kez"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/history": {
            "get": {
                "security": [
                    {
                        "UserID": []
                    }
                ],
                "description": "Show history with pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "history"
                ],
                "summary": "History",
                "operationId": "history",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 10,
                        "type": "integer",
                        "default": 10,
                        "description": "page size",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.HistoryResponse"
                            }
                        },
                        "headers": {
                            "X-Total-Count": {
                                "type": "int",
                                "description": "500"
                            }
                        }
                    }
                }
            }
        },
        "/subscribe/{event_id}": {
            "post": {
                "security": [
                    {
                        "UserID": []
                    }
                ],
                "description": "Subscription on event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscription"
                ],
                "summary": "Subscribe",
                "operationId": "subscribe",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of event",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "subscribed"
                    },
                    "400": {
                        "description": "subscription is unavailable",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "invalid id of event",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscribers/count/{event_id}": {
            "get": {
                "security": [
                    {
                        "UserID": []
                    }
                ],
                "description": "Returns count of subscribers on event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscription"
                ],
                "summary": "Subscriptions Count",
                "operationId": "subcount",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of event",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/responses.SubscriptionCountResponse"
                        }
                    },
                    "400": {
                        "description": "count is unavailable",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "invalid id of event",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions": {
            "get": {
                "security": [
                    {
                        "UserID": []
                    }
                ],
                "description": "Returns info about current state of subscriptions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscription"
                ],
                "summary": "Subscription Info",
                "operationId": "subinfo",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.SubscriptionResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "subscriptions are unavailable",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/unsubscribe/{event_id}": {
            "post": {
                "security": [
                    {
                        "UserID": []
                    }
                ],
                "description": "Unsubscription from event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscription"
                ],
                "summary": "Unsubscribe",
                "operationId": "unsubscribe",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of event",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success"
                    },
                    "400": {
                        "description": "subscription is unavailable",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "invalid id of event",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.HistoryResponse": {
            "type": "object",
            "properties": {
                "event_id": {
                    "type": "string"
                },
                "event_title": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "dto.SubscriptionResponse": {
            "type": "object",
            "properties": {
                "event_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "responses.ErrorInfo": {
            "type": "object",
            "properties": {
                "msg": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "responses.ErrorResponse": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.ErrorInfo"
                    }
                }
            }
        },
        "responses.SubscriptionCountResponse": {
            "type": "object",
            "properties": {
                "event_id": {
                    "type": "string"
                },
                "subscribersCount": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "UserID": {
            "type": "apiKey",
            "name": "User",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1.0",
	Host:             "localhost:8002",
	BasePath:         "/api/v1/subscription",
	Schemes:          []string{},
	Title:            "Sportiq Subscription API",
	Description:      "Subscription microservice for Sportiq Project",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
